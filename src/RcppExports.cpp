// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// ar_generate_randomness_cpp
NumericVector ar_generate_randomness_cpp(int nparticles, int datalength, int dimension);
RcppExport SEXP CoupledPF_ar_generate_randomness_cpp(SEXP nparticlesSEXP, SEXP datalengthSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nparticles(nparticlesSEXP);
    Rcpp::traits::input_parameter< int >::type datalength(datalengthSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    __result = Rcpp::wrap(ar_generate_randomness_cpp(nparticles, datalength, dimension));
    return __result;
END_RCPP
}
// ar_perturb_randomness_cpp
NumericVector ar_perturb_randomness_cpp(const NumericVector& randomness, double rho, int dimension);
RcppExport SEXP CoupledPF_ar_perturb_randomness_cpp(SEXP randomnessSEXP, SEXP rhoSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type randomness(randomnessSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    __result = Rcpp::wrap(ar_perturb_randomness_cpp(randomness, rho, dimension));
    return __result;
END_RCPP
}
// ar_rinit_rcpp
NumericMatrix ar_rinit_rcpp(int nparticles, NumericVector theta, NumericVector rand, int dimension);
RcppExport SEXP CoupledPF_ar_rinit_rcpp(SEXP nparticlesSEXP, SEXP thetaSEXP, SEXP randSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nparticles(nparticlesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    __result = Rcpp::wrap(ar_rinit_rcpp(nparticles, theta, rand, dimension));
    return __result;
END_RCPP
}
// ar_rtransition_rcpp
NumericMatrix ar_rtransition_rcpp(const NumericMatrix& xparticles, NumericVector theta, int time, NumericVector rand, int dimension, NumericMatrix& A);
RcppExport SEXP CoupledPF_ar_rtransition_rcpp(SEXP xparticlesSEXP, SEXP thetaSEXP, SEXP timeSEXP, SEXP randSEXP, SEXP dimensionSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rand(randSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type A(ASEXP);
    __result = Rcpp::wrap(ar_rtransition_rcpp(xparticles, theta, time, rand, dimension, A));
    return __result;
END_RCPP
}
// compute_cost1_
NumericMatrix compute_cost1_(const NumericVector& x, const NumericVector& y);
RcppExport SEXP CoupledPF_compute_cost1_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    __result = Rcpp::wrap(compute_cost1_(x, y));
    return __result;
END_RCPP
}
// compute_cost2_
NumericMatrix compute_cost2_(const NumericVector& x, const NumericVector& y);
RcppExport SEXP CoupledPF_compute_cost2_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    __result = Rcpp::wrap(compute_cost2_(x, y));
    return __result;
END_RCPP
}
// cost_matrix_
NumericMatrix cost_matrix_(const NumericMatrix& x, const NumericMatrix& y);
RcppExport SEXP CoupledPF_cost_matrix_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    __result = Rcpp::wrap(cost_matrix_(x, y));
    return __result;
END_RCPP
}
// square_cost_matrix_
NumericMatrix square_cost_matrix_(const NumericMatrix& x, const NumericMatrix& y);
RcppExport SEXP CoupledPF_square_cost_matrix_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type y(ySEXP);
    __result = Rcpp::wrap(square_cost_matrix_(x, y));
    return __result;
END_RCPP
}
// indexmatching_cpp
IntegerMatrix indexmatching_cpp(int ndraws, NumericVector w1, NumericVector w2, NumericVector uniforms);
RcppExport SEXP CoupledPF_indexmatching_cpp(SEXP ndrawsSEXP, SEXP w1SEXP, SEXP w2SEXP, SEXP uniformsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uniforms(uniformsSEXP);
    __result = Rcpp::wrap(indexmatching_cpp(ndraws, w1, w2, uniforms));
    return __result;
END_RCPP
}
// indexmatching_given_cpp
IntegerVector indexmatching_given_cpp(int ndraws, NumericVector w1, NumericVector w2, NumericVector uniforms, IntegerVector ancestors_ref);
RcppExport SEXP CoupledPF_indexmatching_given_cpp(SEXP ndrawsSEXP, SEXP w1SEXP, SEXP w2SEXP, SEXP uniformsSEXP, SEXP ancestors_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uniforms(uniformsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ancestors_ref(ancestors_refSEXP);
    __result = Rcpp::wrap(indexmatching_given_cpp(ndraws, w1, w2, uniforms, ancestors_ref));
    return __result;
END_RCPP
}
// transport_cpp
IntegerMatrix transport_cpp(NumericMatrix x1, NumericMatrix x2, NumericVector w1, NumericVector w2, NumericVector uniforms, double epsilon, double desired_alpha);
RcppExport SEXP CoupledPF_transport_cpp(SEXP x1SEXP, SEXP x2SEXP, SEXP w1SEXP, SEXP w2SEXP, SEXP uniformsSEXP, SEXP epsilonSEXP, SEXP desired_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uniforms(uniformsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type desired_alpha(desired_alphaSEXP);
    __result = Rcpp::wrap(transport_cpp(x1, x2, w1, w2, uniforms, epsilon, desired_alpha));
    return __result;
END_RCPP
}
// transport_given_cpp
IntegerVector transport_given_cpp(NumericMatrix x1, NumericMatrix x2, NumericVector w1, NumericVector w2, NumericVector uniforms, double epsilon, double desired_alpha, IntegerVector ancestors_ref);
RcppExport SEXP CoupledPF_transport_given_cpp(SEXP x1SEXP, SEXP x2SEXP, SEXP w1SEXP, SEXP w2SEXP, SEXP uniformsSEXP, SEXP epsilonSEXP, SEXP desired_alphaSEXP, SEXP ancestors_refSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type uniforms(uniformsSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type desired_alpha(desired_alphaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ancestors_ref(ancestors_refSEXP);
    __result = Rcpp::wrap(transport_given_cpp(x1, x2, w1, w2, uniforms, epsilon, desired_alpha, ancestors_ref));
    return __result;
END_RCPP
}
// create_A_
NumericMatrix create_A_(double alpha, int d);
RcppExport SEXP CoupledPF_create_A_(SEXP alphaSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    __result = Rcpp::wrap(create_A_(alpha, d));
    return __result;
END_RCPP
}
// hilbert_order_
NumericVector hilbert_order_(NumericMatrix x);
RcppExport SEXP CoupledPF_hilbert_order_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    __result = Rcpp::wrap(hilbert_order_(x));
    return __result;
END_RCPP
}
// kalman_loglikelihood_
double kalman_loglikelihood_(const List& parameters, const NumericMatrix& observations);
RcppExport SEXP CoupledPF_kalman_loglikelihood_(SEXP parametersSEXP, SEXP observationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    __result = Rcpp::wrap(kalman_loglikelihood_(parameters, observations));
    return __result;
END_RCPP
}
// kalman_filtering_means_
NumericMatrix kalman_filtering_means_(const List& parameters, const NumericMatrix& observations);
RcppExport SEXP CoupledPF_kalman_filtering_means_(SEXP parametersSEXP, SEXP observationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    __result = Rcpp::wrap(kalman_filtering_means_(parameters, observations));
    return __result;
END_RCPP
}
// kalman_smoothing_means_
NumericMatrix kalman_smoothing_means_(const List& parameters, const NumericMatrix& observations);
RcppExport SEXP CoupledPF_kalman_smoothing_means_(SEXP parametersSEXP, SEXP observationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const List& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type observations(observationsSEXP);
    __result = Rcpp::wrap(kalman_smoothing_means_(parameters, observations));
    return __result;
END_RCPP
}
// one_step_lorenz_vector
NumericMatrix one_step_lorenz_vector(NumericMatrix xparticles, double tstart, double tend, double h, NumericVector parameters);
RcppExport SEXP CoupledPF_one_step_lorenz_vector(SEXP xparticlesSEXP, SEXP tstartSEXP, SEXP tendSEXP, SEXP hSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< double >::type tstart(tstartSEXP);
    Rcpp::traits::input_parameter< double >::type tend(tendSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    __result = Rcpp::wrap(one_step_lorenz_vector(xparticles, tstart, tend, h, parameters));
    return __result;
END_RCPP
}
// lorenz_generate_randomness_cpp
NumericVector lorenz_generate_randomness_cpp(int nparticles, int datalength);
RcppExport SEXP CoupledPF_lorenz_generate_randomness_cpp(SEXP nparticlesSEXP, SEXP datalengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nparticles(nparticlesSEXP);
    Rcpp::traits::input_parameter< int >::type datalength(datalengthSEXP);
    __result = Rcpp::wrap(lorenz_generate_randomness_cpp(nparticles, datalength));
    return __result;
END_RCPP
}
// lorenz_perturb_randomness_cpp
NumericVector lorenz_perturb_randomness_cpp(const NumericVector& randomness, double rho);
RcppExport SEXP CoupledPF_lorenz_perturb_randomness_cpp(SEXP randomnessSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type randomness(randomnessSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    __result = Rcpp::wrap(lorenz_perturb_randomness_cpp(randomness, rho));
    return __result;
END_RCPP
}
// malikpitt_
NumericVector malikpitt_(const NumericVector& xparticles, const NumericVector& weights, double u);
RcppExport SEXP CoupledPF_malikpitt_(SEXP xparticlesSEXP, SEXP weightsSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    __result = Rcpp::wrap(malikpitt_(xparticles, weights, u));
    return __result;
END_RCPP
}
// median_rcpp
double median_rcpp(NumericVector x);
RcppExport SEXP CoupledPF_median_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    __result = Rcpp::wrap(median_rcpp(x));
    return __result;
END_RCPP
}
// multinomial_resampling_n_
IntegerVector multinomial_resampling_n_(const NumericVector& weights, int ndraws);
RcppExport SEXP CoupledPF_multinomial_resampling_n_(SEXP weightsSEXP, SEXP ndrawsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ndraws(ndrawsSEXP);
    __result = Rcpp::wrap(multinomial_resampling_n_(weights, ndraws));
    return __result;
END_RCPP
}
// rmvnorm
NumericMatrix rmvnorm(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP CoupledPF_rmvnorm(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    __result = Rcpp::wrap(rmvnorm(nsamples, mean, covariance));
    return __result;
END_RCPP
}
// rmvnorm_transpose
NumericMatrix rmvnorm_transpose(int nsamples, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP CoupledPF_rmvnorm_transpose(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    __result = Rcpp::wrap(rmvnorm_transpose(nsamples, mean, covariance));
    return __result;
END_RCPP
}
// rmvnorm_transpose_cholesky
NumericMatrix rmvnorm_transpose_cholesky(int nsamples, const NumericVector& mean, const Eigen::MatrixXd& cholesky_covariance);
RcppExport SEXP CoupledPF_rmvnorm_transpose_cholesky(SEXP nsamplesSEXP, SEXP meanSEXP, SEXP cholesky_covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nsamples(nsamplesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_covariance(cholesky_covarianceSEXP);
    __result = Rcpp::wrap(rmvnorm_transpose_cholesky(nsamples, mean, cholesky_covariance));
    return __result;
END_RCPP
}
// dmvnorm
NumericVector dmvnorm(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP CoupledPF_dmvnorm(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    __result = Rcpp::wrap(dmvnorm(x, mean, covariance));
    return __result;
END_RCPP
}
// dmvnorm_transpose
NumericVector dmvnorm_transpose(const NumericMatrix& x, const NumericVector& mean, const NumericMatrix& covariance);
RcppExport SEXP CoupledPF_dmvnorm_transpose(SEXP xSEXP, SEXP meanSEXP, SEXP covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type covariance(covarianceSEXP);
    __result = Rcpp::wrap(dmvnorm_transpose(x, mean, covariance));
    return __result;
END_RCPP
}
// dmvnorm_transpose_cholesky
NumericVector dmvnorm_transpose_cholesky(const NumericMatrix& x, const NumericVector& mean, const Eigen::MatrixXd& cholesky_covariance);
RcppExport SEXP CoupledPF_dmvnorm_transpose_cholesky(SEXP xSEXP, SEXP meanSEXP, SEXP cholesky_covarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type cholesky_covariance(cholesky_covarianceSEXP);
    __result = Rcpp::wrap(dmvnorm_transpose_cholesky(x, mean, cholesky_covariance));
    return __result;
END_RCPP
}
// one_step_pz_vector
NumericMatrix one_step_pz_vector(NumericMatrix xparticles, NumericVector alphas, double t, NumericVector parameters);
RcppExport SEXP CoupledPF_one_step_pz_vector(SEXP xparticlesSEXP, SEXP alphasSEXP, SEXP tSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    __result = Rcpp::wrap(one_step_pz_vector(xparticles, alphas, t, parameters));
    return __result;
END_RCPP
}
// pz_generate_randomness_cpp
NumericVector pz_generate_randomness_cpp(int nparticles, int datalength);
RcppExport SEXP CoupledPF_pz_generate_randomness_cpp(SEXP nparticlesSEXP, SEXP datalengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type nparticles(nparticlesSEXP);
    Rcpp::traits::input_parameter< int >::type datalength(datalengthSEXP);
    __result = Rcpp::wrap(pz_generate_randomness_cpp(nparticles, datalength));
    return __result;
END_RCPP
}
// pz_perturb_randomness_cpp
NumericVector pz_perturb_randomness_cpp(const NumericVector& randomness, double rho);
RcppExport SEXP CoupledPF_pz_perturb_randomness_cpp(SEXP randomnessSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type randomness(randomnessSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    __result = Rcpp::wrap(pz_perturb_randomness_cpp(randomness, rho));
    return __result;
END_RCPP
}
// stochvol_dmeas_
NumericVector stochvol_dmeas_(NumericMatrix xparticles, List& theta, NumericVector& observation, int dimension);
RcppExport SEXP CoupledPF_stochvol_dmeas_(SEXP xparticlesSEXP, SEXP thetaSEXP, SEXP observationSEXP, SEXP dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type xparticles(xparticlesSEXP);
    Rcpp::traits::input_parameter< List& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type observation(observationSEXP);
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    __result = Rcpp::wrap(stochvol_dmeas_(xparticles, theta, observation, dimension));
    return __result;
END_RCPP
}
// systematic_resampling_n_
IntegerVector systematic_resampling_n_(const NumericVector& weights, int ndraws, double u);
RcppExport SEXP CoupledPF_systematic_resampling_n_(SEXP weightsSEXP, SEXP ndrawsSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    __result = Rcpp::wrap(systematic_resampling_n_(weights, ndraws, u));
    return __result;
END_RCPP
}
// wasserstein_auto_
List wasserstein_auto_(NumericVector p_, NumericVector q_, NumericMatrix cost_matrix_, double epsilon, double desired_alpha);
RcppExport SEXP CoupledPF_wasserstein_auto_(SEXP p_SEXP, SEXP q_SEXP, SEXP cost_matrix_SEXP, SEXP epsilonSEXP, SEXP desired_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p_(p_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q_(q_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cost_matrix_(cost_matrix_SEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type desired_alpha(desired_alphaSEXP);
    __result = Rcpp::wrap(wasserstein_auto_(p_, q_, cost_matrix_, epsilon, desired_alpha));
    return __result;
END_RCPP
}
